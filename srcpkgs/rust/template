# Template file for 'rust'
pkgname=rust
version=1.17.0
revision=1
# NB. if you push any(!) new version, don't forget to put a build
# output of musl to https://repo.voidlinux.eu/distfiles/
wrksrc="rustc-${version}-src"
lib32disabled=yes
patch_args="-Np1"
build_style=configure
make_build_args="dist VERBOSE=1"
only_for_archs="i686 x86_64 x86_64-musl"
hostmakedepends="cmake curl pkg-config python"
makedepends="libffi-devel llvm3.9 ncurses-devel zlib-devel"
short_desc="Safe, concurrent, practical systems language"
maintainer="Leah Neukirchen <leah@vuxu.org>"
homepage="http://www.rust-lang.org/"
license="MIT, Apache-2.0"
distfiles="https://static.rust-lang.org/dist/rustc-${version}-src.tar.gz"
checksum=4baba3895b75f2492df6ce5a28a916307ecd1c088dc1fd02dbfa8a8e86174f87

case "$XBPS_MACHINE" in
x86_64-musl)
	hostmakedepends+=" libcurl libgit2"
	distfiles+="
	 https://repo.voidlinux.eu/distfiles/rustc-1.16.0-x86_64-unknown-linux-musl.tar.gz
	 https://repo.voidlinux.eu/distfiles/rust-std-1.16.0-x86_64-unknown-linux-musl.tar.gz
	 https://repo.voidlinux.eu/distfiles/cargo-0.17.0-x86_64-unknown-linux-musl.tar.gz"
	checksum+="
	 9ffc7e168bd6fcdb912535506efb15b06d85dc4bed79c11d5f2651978cf6116b
	 8ccb1ba07a1ccd146f29eb0b3f3d6feffed55b987d524c8955f6c3f50c587ae5
	 0150d5b249fa66a5d2515e6beb27aa6dfb25301bb50522fab7c2445bb7ecdd09"
	;;
x86_64)
	# extract from src/stage0.txt
	distfiles+="
	 https://static.rust-lang.org/dist/2017-03-11/rustc-1.16.0-x86_64-unknown-linux-gnu.tar.gz
	 https://static.rust-lang.org/dist/2017-03-11/rust-std-1.16.0-x86_64-unknown-linux-gnu.tar.gz
	 https://s3.amazonaws.com/rust-lang-ci/cargo-builds/6b05583d71f982bcad049b9fa094c637c062e751/cargo-nightly-x86_64-unknown-linux-gnu.tar.gz"
	checksum+="
	 b1dc3f754eeaf03891a3bd398c8c5024404c0078a334e5d8795e9dc419d147b3
	 cbd43de2ab819d3332ce309046f3b5d715c1b47877a237791b99c96b1fe0d555
	 d9e69d2b87dc0cf7fafe0e0eb64f82fe3414ef14fcb27f5eeff34df860e459d9"
	;;
i686)
	# extract from src/stage0.txt
	distfiles+="
	 https://static.rust-lang.org/dist/2017-03-11/rustc-1.16.0-i686-unknown-linux-gnu.tar.gz
	 https://static.rust-lang.org/dist/2017-03-11/rust-std-1.16.0-i686-unknown-linux-gnu.tar.gz
	 https://s3.amazonaws.com/rust-lang-ci/cargo-builds/6b05583d71f982bcad049b9fa094c637c062e751/cargo-nightly-i686-unknown-linux-gnu.tar.gz"
	checksum+="
	 f8e0f96c17d8345be7818035e9bcae8e809a1b13635fe9a322df4a82d6dd1275
	 5a74e3661f4b300bf73353389acab097f3e07813b0f3073007830a549656054a
	 863a4f92bbeec76257403fd571a90b90bd759ec8bcaddb7517fb89d40959e9e5"
	;;
esac

post_extract() {
	rm -rf src/llvm

	mkdir -p stage0
	cp -flr ../rustc-*/rustc/* stage0
	cp -flr ../rust-std-*/rust-std-*/* stage0
	cp -flr ../cargo-*/cargo/* stage0

	# XXX: Cheat Rust build system so we can build rustc using different
	# version of (prebuilt) stable rustc than preconfigured. It's hack-ish,
	# but since we're basically rebuilding rustc with the same version,
	# it's actually safe.
	# Note: --enable-local-rebuild from #33787 didn't work, don't know why.
	export LD_LIBRARY_PATH="$wrksrc/stage0/lib"
	rustc_ver="$($wrksrc/stage0/bin/rustc --version | cut -f2 -d ' ')"
	rustc_key="$(printf "$rustc_ver" | md5sum | cut -c1-8)"
	sed -Ei \
		-e "s/^(rustc):.*/\1: $rustc_ver-1970-01-01/" \
		-e "s/^(rustc_key):.*/\1: $rustc_key/" \
		src/stage0.txt

	# Generate config for bootstrap.py to use our prebuilt rustc and cargo
	# for bootstrapping instead of downloading snapshot from internet.
	cat > config.toml <<EOF
[build]
cargo = "$wrksrc/stage0/bin/cargo"
rustc = "$wrksrc/stage0/bin/rustc"
EOF

	sed -i /LD_LIBRARY_PATH/d src/bootstrap/bootstrap.py
}

pre_build() {
	export CARGO_HOME="$wrksrc/.cargo"
	export SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt
	export LD_LIBRARY_PATH="$wrksrc/stage0/lib"
	export PATH="$wrksrc/stage0/bin:$PATH"
	export MUSL_ROOT=/usr
	export RUST_BACKTRACE=1
}

do_configure() {
	local _triplet
	case $XBPS_TARGET_MACHINE in
		i686) _triplet=i686-unknown-linux-gnu;;
		x86_64) _triplet=x86_64-unknown-linux-gnu;;
		x86_64-musl) _triplet=x86_64-unknown-linux-musl;;
		*) _triplet=$XBPS_TARGET_MACHINE;;
	esac
	export LD_LIBRARY_PATH="$wrksrc/stage0/lib"
	configure_args="
		--prefix=/usr
		--host=${_triplet}
		--build=${_triplet}
		--release-channel=stable
		--disable-rpath
		--enable-ccache
		--llvm-root=/usr
	"
	case "$XBPS_TARGET_MACHINE" in
	*-musl)
		configure_args+="--musl-root=/usr --disable-jemalloc"
		;;
	esac
	./configure $configure_args

}
do_install() {
	vmkdir usr
	tar xf build/dist/rustc-*-*-*.tar.gz -C "$DESTDIR/usr" --strip-components=2 --exclude=manifest.in
	tar xf build/dist/rust-std-*-*-*.tar.gz -C "$DESTDIR/usr/lib" --strip-components=3 --exclude=manifest.in
	tar xf build/dist/rust-docs-*-*-*.tar.gz -C "$DESTDIR/usr" --strip-components=2 --exclude=manifest.in

	vlicense COPYRIGHT
	vlicense LICENSE-APACHE
	vlicense LICENSE-MIT

	cd ${DESTDIR}/usr/lib
	ln -sf rustlib/*/lib/*.so .   # symlinks instead of copies
}

rust-doc_package() {
	short_desc+=" - documentation"
	noarch=yes
	pkg_install() {
		vmove usr/share/doc
	}
}
